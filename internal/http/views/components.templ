package views

templ title(text string) {
	<h1 class="text-2xl font-bold text-gray-800 dark:text-gray-200">
		{ text }
	</h1>
}

templ wsHotReload() {
	<script>
  let loc = window.location;
  let uri = "ws:";
  if (loc.protocol === "https:") {
    uri = "wss:";
  }
  uri += "//" + loc.host;
  uri += "/ws/dev/hot-reload";

  ws = new WebSocket(uri);
  hasOpened = false;
  ws.onopen = function (event) {
    hasOpened = true;
  };
  ws.onclose = function (event) {
    if (hasOpened) {
      setInterval(() => {
        fetch("/api/livez").then(() => {
          loc.reload()
        }).catch(() => { });
      }, 20); // every 20ms is good enough for this to reload asap
    } else {
      console.warn("hot-reload websocket closed, but it never opened, assuming hot-reload is not supported (i.e. is production)")
    }
  };

  setInterval(() => {
    fetch("/api/livez")
  }, 100)
</script>
}

templ darkModeToggle() {
	<button
		id="theme-toggle"
		type="button"
		class="p-2.5 text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none dark:focus:ring-gray-700 rounded-lg text-sm"
	>
		@iconSun(templ.Attributes{"id": "theme-toggle-light-icon", "class": "h-5 w-5"})
		@iconMoon(templ.Attributes{"id": "theme-toggle-dark-icon", "class": "h-5 w-5 hidden"})
	</button>
	<script>
  var themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');
  var themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');

  // Change the icons inside the button based on previous settings
  if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
    themeToggleLightIcon.classList.add('hidden');
    themeToggleDarkIcon.classList.remove('hidden');
    document.documentElement.classList.add('dark');
  } else {
    themeToggleLightIcon.classList.remove('hidden');
    themeToggleDarkIcon.classList.add('hidden');
  }

  var themeToggleBtn = document.getElementById('theme-toggle');

  themeToggleBtn.addEventListener('click', function () {

    // toggle icons inside button
    themeToggleDarkIcon.classList.toggle('hidden');
    themeToggleLightIcon.classList.toggle('hidden');

    // if set via local storage previously
    if (localStorage.getItem('color-theme')) {
      if (localStorage.getItem('color-theme') === 'light') {
        document.documentElement.classList.add('dark');
        localStorage.setItem('color-theme', 'dark');
      } else {
        document.documentElement.classList.remove('dark');
        localStorage.setItem('color-theme', 'light');
      }

      // if NOT set via local storage previously
    } else {
      if (document.documentElement.classList.contains('dark')) {
        document.documentElement.classList.remove('dark');
        localStorage.setItem('color-theme', 'light');
      } else {
        document.documentElement.classList.add('dark');
        localStorage.setItem('color-theme', 'dark');
      }
    }

  });
</script>
}

templ Header() {
	<header class="bg-white shadow dark:bg-gray-900">
		<div class="container mx-auto px-4 py-4 flex items-center justify-between">
			<a class="flex items-center" href="/">
				@title("Kasama Twitch Helper")
			</a>
			<div class="flex flex-row items-center">
				@darkModeToggle()
			</div>
		</div>
	</header>
}

templ Footer() {
	<footer class="bg-white shadow dark:bg-gray-900">
		<div class="container mx-auto px-4 py-4 flex items-center justify-between">
			<p class="text-gray-600 dark:text-gray-400">Â© 2024 Roberto Alegro. Streaming Streams</p>
			<!--
			<div>
				<a class="text-gray-600 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200 mr-4" href="#">
					Privacy Policy
				</a>
				<a class="text-gray-600 hover:text-gray-800 dark:text-gray-400 dark:hover:text-gray-200" href="#">
					Terms of Service
				</a>
			</div>
      -->
		</div>
	</footer>
}
